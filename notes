1. what are master key and database scoped credential? what is the use of both?
->
master key provides the encryption to the other key secrets and credentials in the database.
-- Creates the master encryption key for the database 
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourStrongPassword123!';

purpose:
it encrypts the secrets stored in database scoped credentials
it allows automatic decryption.

NOTE:
you only create one per database.

database scoped credential:
it stored the authentication information (credential) needed to connect to external resources outside of SQL server.
-- Stores authentication information for external resources
-- example of using SAS Token:
CREATE DATABASE SCOPED CREDENTIAL MyAzureCredential
WITH IDENTITY = 'SHARED ACCESS SIGNATURE',
SECRET = 'sv=2020-08-04&ss=b&srt=sco&sp=rl&se=2024-01-01Z&sig=YourSignature';

purpose:
it stores secretly without exposing them in public.

External Data Source:
we have to create external data source for each container but all the containers can use same database scoped credential.

All Azure Authentication Methods:
| Method                                      | Type                       | Secrets Stored?                      | Scope                   | Common Use Case                                 | Security Level                       |
| ------------------------------------------- | -------------------------- | ------------------------------------ | ----------------------- | ----------------------------------------------- | ------------------------------------ |
| **1. Managed Identity (MI)**                | Azure AD-based             | ‚ùå No                                | Resource or Service     | Synapse, ADF, Databricks, Logic Apps, Functions | üîí **Very High**                     |
| **2. Shared Access Signature (SAS Token)**  | Key-based temporary access | ‚úÖ Yes                               | Container / Blob / File | External apps or short-term access              | ‚ö†Ô∏è Medium                            |
| **3. Storage Account Access Key**           | Key-based permanent access | ‚úÖ Yes                               | Entire storage account  | Legacy apps or admin-level access               | ‚ö†Ô∏è Low                               |
| **4. Service Principal (App Registration)** | Azure AD-based             | ‚úÖ Yes (Client secret / certificate) | Application-level       | CI/CD pipelines, automation                     | üîí High                              |
| **5. User Delegation SAS**                  | Azure AD-based (temporary) | ‚úÖ Yes (generated via token)         | Blob / Container        | Short-lived, user-scoped access                 | üîí High                              |
| **6. Anonymous Access (Public Blob)**       | None                       | ‚ùå No                                | Public container only   | Static public data hosting                      | üö´ Very Low (Avoid in secure setups) |

There are two types in Managed Identity (MI):
1. System assigned managed identity.
for internal resource authentication (ADF ‚Üí Synapse pipeline triggers)
it is automatically created which is attached to resource so if the resource is killed then it will also gets killed.

2. User assigned managed identity (UAMI).
for external access (ADLS, Key Vault)
it is independently created and not attached to any resource so if the resource gets killed then it won't affect UAMI.
Example: when we are using multiple services in a single project such as ADLS, ADF, Azure Databricks, Azure synapse then UAMI is recommended to be used.

External location for Blob Storage: 
https://<account\>.blob.core.windows.net/<container\>/<path\>

External location for ADLS Gen2: 
https://<account\>.dfs.core.windows.net/<container\>/<path\>

NOTE: IF WE ARE USING EXTERNAL TABLE OR OPENROWSET() WHICH EVENTUALLY USES EXTERNAL DATA SOURCE THEN THERE IS NO NEED OF CREATING LINKED SERVICE.



















































